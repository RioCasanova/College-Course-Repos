@page "/SamplePages/Invoice"
<PageTitle>Invoice</PageTitle>

<h3>Invoice #@invoice.InvoiceNo</h3>
@{
    //  OnSubmit
    //  The OnSubmit event fires when the user clicks on the Submit button in the form.
    //  It handlers takes as an argument the EditContext object and is used to trigger some
    //      custom logic based on the validity of the form.
    //  NOTE:   When there is a handler for the OnSubmit event, The OnValidSubmit and
    //              OnInvalidSubmit event will not be fired.

    //  OnValidSubmit
    //  The OnValidSubmit event fires when the form is submitted and there are no
    //      validation errors.
    //  It is mapped to OnValidSubmit event of the Microsoft EditForm.  Its handlers takes
    //      the EditContext as an argument

    //  OnInvalidSubmit
    //  The OnInvalidSubmit event fires when there are validation errors in the FORM upon
    //      it submission.
    //  It is mapped to OnInvalidSubmit event of the Microsoft EditForm.  Its handlers takes
    //      the EditContext as an argument

    //  NOTE:   We can use note of these events or one of these events.  The only situation
    //              where we can use two events is when we set OnValidSubmit and
    //              OnInvalidSubmit together.  Neither of those two events can be consumed
    //              if OnSubmit is set.
}

<EditForm Model="invoice" OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInValidSubmit">
    @{
        //  The DataAnnotationsValidator is the standard validator type in Blazor.
        //  Adding this component within an EditForm component will enable form
        //      validation
    }
    <DataAnnotationsValidator/>
    @{
        //  The ValidationSummary component can simply be dropped into an EditForm in our
        //      mark-up
    }
    @*<ValidationSummary/>*@
    <div>
        <p>
            <label>Invoice Date</label>
            <label>@invoice.InvoiceDate.ToShortDateString()</label>
        </p>
    </div>
    <div>
        <p>
            <label>Sub Total</label>
            <label>@invoice.SubTotal</label>
        </p>
        <p>
            <label>Tax</label>
            <label>@invoice.Tax</label>
        </p>
    </div>
    <div>
        <p>
            <label>Sale Person</label>
            <InputText id="salePerson" @bind-Value="invoice.SalePerson" />
            <ValidationMessage For="() => invoice.SalePerson"/>
        </p>
        <p>
            <label>Payment Type</label>
            <InputText id="paymentType" @bind-Value="invoice.PaymentType" />
            <ValidationMessage For="() => invoice.PaymentType" />
        </p>
    </div>
    <button type="submit">Submit</button>
</EditForm>
<div>
    <h4>@feedBack</h4>
</div>

