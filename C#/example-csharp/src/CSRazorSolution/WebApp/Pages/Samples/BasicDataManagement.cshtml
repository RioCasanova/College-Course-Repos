@page
@model WebApp.Pages.Samples.BasicDataManagementModel
@{
    ViewData["Title"] = "Basic Data Management";
}
<h1>Basic Data Management</h1>
@*
    Investigate using forms on a webpage

    controls: <input> <select> <button> <form> <label> <textarea>
    helper tags:  asp-for asp-page-handler

    <form>  paramters:  method = indicates how data is transfered tp server
                                    get:  visible on URL in plain text
                                    Post: embeeded within the form objects sent to the srver
                                            not visilbe
                        action =    directs toe server to the page to process form
                                        "" (action="") direct to current page (optional)

    <label> no need for parameters, can have helper tags such as asp-for
              depending on css stylesheet, you can get different results.

    <input> used to accept input from the page user
            has various types of acceptable inputs (type=)
            can tie the control to a property on the ModelPage directly (asp-for="propertyName")

    <select>  used to diplay a list of items to select a value from.
              can be tied to a ModelPage property (asp-for)
              consists of 2 parts on each line in the list of selectable items
              a line of a selectable item is indicated using the <option>
                    <option value = "returnedvalue">display text<option>
                    returnedvalue is NOT visible to the page user
                                  is the value sent to the ModelPage
                    display text used by the page user to make the selection
                                  is the visible portion of the selection line

    <textarea>  display a large text input box area for the web page user to
                    enter a large amount of data
                display size is controlled using rows=(vertical) and cols=(horizonatal)
                auto-scroll bars

    <button>    three types (type=)
                submit:  sends the form (ModelPage properties) to the server for processing
                reset:   locally clear the form and does NOT send to server for processing
                button:  ran locally (rarely used)

                you can assign a specific value associated with the button that can be
                    logically test in your ModelPage (value=) (optional)
                to identify the contrl you can use (optional)
                    id= basically used by javascript to identify the control
                    name= is used by the Request["xxx"] to identify the contrl in your C# code
                    value can be the same
                helper tag to identifer processing OnPost on the ModelPage (asp-page-helper)


*@

<form method="post" action="">
    <label>
        Enter a number <input type="number" asp-for="MyNum" />
    </label>

    <label>
        Select a favourite course: (drop down list)
        <select asp-for="FavouriteCourse">
            <option value="">select ...</option>
            <option value="1008">COMP1008</option>
            <option value="1517">CPSC1517</option>
            <option value="2018">DMIT2018</option>
        </select>
    </label>

    <label>
        Comments
        <textarea asp-for="Comments" rows="5" cols="100"></textarea>

    </label>
    <br />

    <button type="submit" value="bdmSubmitA" id="jsIdentifierA"
            name="RequestObjectIdentifierA" asp-page-handler="A">
        Press Me A(submit form)
    </button>
    &nbsp;&nbsp;  @*add spaces between buttons (horizonal)*@
    <button type="submit" value="bdmSubmitB" id="jsIdentifierB"
            name="RequestObjectIdentifierB" asp-page-handler="B">
        Press Me B(submit form)
    </button>

</form>
<br />
<p>@Model.FeedBack</p>