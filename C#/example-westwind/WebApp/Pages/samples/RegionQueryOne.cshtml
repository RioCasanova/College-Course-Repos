@page "{RegionID?}" 
@model WebApp.Pages.samples.RegionQueryOneModel
@{
    ViewData["Title"] = "PKey Region Query";
}
<h1>Query: Region query by primary key</h1>
<p>@Model.FeedbackMessage</p>
<form method="post">
    @*
        The type attribute can be set to different inputs for acceptable values 
        "number" restricts input to numerics. The numerics are by default whole numbers
        The numerics can be negative or positive. Additionally, attributes can be used
        to refine the acceptable values.
            min-"xxx" indicates the minimum acceptable value
            max="xxx" indicates the maximum acceptable value
            step="1" (default) whole numbers increments of 1 (1,2,3..)
            step="0.01" decimal numbers increments of 0.01 (great for $ amounts)
            Required indicates that the field must have a value.

        When you use these validation attributes on your for input controls,
        the user MUST meet the validation BEFORE the form is sent to the web
        server for processing.

        The attribute formnovalidate overrides any validation (html5) that exists on your form controls
    *@
    <label>
        Enter Region ID:
        <input type="number" asp-for="RegionID" 
                placeholder="Enter your Region ID number"
                step="1" required="true"/>
    </label>
    <label>
        Select a Region:
        <select asp-for="SelectRegion">
            @* If you do not indicate a specific option to display
            then the list defaults to the first option line
            *@
            <option value="0">select...</option>
            @foreach (var item in Model.RegionList)
            {
                // To retain the selection you need to specify a row to be the selected option
                // this is done with the selected attribute on the value
                if (item.RegionId == Model.RegionID)
                {
                    <option value="@item.RegionId" selected="true">@item.RegionDescription</option>
                }
                else
                {
                    <option value="@item.RegionId">@item.RegionDescription</option>
                }

            }
        </select>
    </label>
    <button type="submit" asp-page-handler="Fetch">Fetch By ID</button> @*The 'asp-for-handler' looks for the same names 
                                                                            in the backend code of this RazorPage, in this way we 
                                                                            can connect our buttons to our posts on the backend*@
    <button type="submit" asp-page-handler="Clear" formnovalidate="">Clear</button>
    <button type="submit" asp-page-handler="Select" formnovalidate="">Select By Description</button>&nbsp;&nbsp;
</form>